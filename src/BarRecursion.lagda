
 =========================
 =                       =
 =  ¬ß3.4  Bar recursion  =
 =                       =
 =========================

    Chuangjie Xu, February 2020

    updated in May 2020

Schwichtenberg [2] shows that the terms of G√∂del's System T are closed
under the rule of Spector's bar recursion of types 0 and 1.  Oliva and
Steila [1] provide a more direct proof of Schwichtenberg's theorem via
their notion of general bar recursion whose termination condition is
given by decidable monotone predicates on finite sequences.  We present
their construction general-bar-recursion functionals [1, Def. 3.1&3.3]
as an instance of our translation, and then prove its correctness using
the fundamental theorem of logical relation.


References

[1] P. Oliva and S. Steila.  A direct proof of Schwichtenberg's bar
    recursion closure theorem.  Accepted by The Journal of Symbolic
    Logic, 2017.

[2] H. Schwichtenberg.  On bar recursion of types 0 and 1.  The
    Journal of Symbolic Logic, vol. 44, no. 3, pp. 325‚Äì329, 1979.

\begin{code}

{-# OPTIONS --without-K --safe #-}

open import Preliminaries
open import T
open import TAuxiliaries hiding (Œ¶ ; Œ¶-spec)

module BarRecursion (œÉ : Ty) where

\end{code}

‚ñ† Function extensionality

We will need function extensionality in the proofs of

 1. Œ® k is a bar recursion functional of ŒªŒ±.k [1, Lemma 2.1], and

 2. Œ∫ preserves the logical relation.

\begin{code}

FunExt : Set‚ÇÅ
FunExt = {A B : Set} {f g : A ‚Üí B} ‚Üí (‚àÄ x ‚Üí f x ‚â° g x) ‚Üí f ‚â° g

\end{code}

‚ñ† Preliminaries

\begin{code}

--
-- finite sequences of natural numbers
--
‚Ñï* : Set
‚Ñï* = ‚Ñï·¥∫ √ó ‚Ñï

infixl 10 _‚ú¶_

--
-- s ‚ú¶ n -- append n to s
--
_‚ú¶_ : ‚Ñï* ‚Üí ‚Ñï ‚Üí ‚Ñï*
(Œ± , l) ‚ú¶ n = rec (Œª _ v ‚Üí rec v (Œª _ _ ‚Üí 0) , 1)
                  (Œª n z f v ‚Üí rec (f 0) (Œª i g ‚Üí pr‚ÇÅ (z (f ‚àò suc) v) i) , suc (suc n))
                  l Œ± n

--
-- s ‚àã Œ≤ means s is an initial segment of Œ≤.
--
_‚àã_ : ‚Ñï* ‚Üí ‚Ñï·¥∫ ‚Üí Set
(Œ± , l) ‚àã Œ≤ = ‚àÄ i ‚Üí i < l ‚Üí Œ± i ‚â° Œ≤ i

--
-- extend finite sequences to infinite ones
--
_^ : ‚Ñï* ‚Üí ‚Ñï·¥∫
_^ = pr‚ÇÅ

s‚àãsn^ : (s : ‚Ñï*) {n : ‚Ñï} ‚Üí s ‚àã ((s ‚ú¶ n) ^)
s‚àãsn^ (Œ± , suc l)  0       _         = refl
s‚àãsn^ (Œ± , suc l) (suc i) (‚â§suc i<l) = s‚àãsn^ (Œ± ‚àò suc , l) i i<l

--
-- length of finite sequences
--
len : ‚Ñï* ‚Üí ‚Ñï
len = pr‚ÇÇ

len‚ú¶-suc : {s : ‚Ñï*} {n : ‚Ñï} ‚Üí suc (len s) ‚â° len (s ‚ú¶ n)
len‚ú¶-suc {Œ± , 0}     {n} = refl
len‚ú¶-suc {Œ± , suc l} {n} = refl


infix 2 _‚àà_ _‚àâ_
--
-- decidable predicates as ‚Ñï-valued functions
--
_‚àâ_ _‚àà_ : {A : Set} ‚Üí A ‚Üí (A ‚Üí ‚Ñï) ‚Üí Set
a ‚àà Q = ¬¨ (Q a ‚â° 0)
a ‚àâ Q = Q a ‚â° 0

‚àà-dec : {A : Set} {a : A} (Q : A ‚Üí ‚Ñï) ‚Üí (a ‚àà Q) + (a ‚àâ Q)
‚àà-dec {_} {a} Q with Q a
... | 0     = inr refl
... | suc n = inl (Œª ())

monotone : (‚Ñï* ‚Üí ‚Ñï) ‚Üí Set
monotone S = ‚àÄ s n ‚Üí s ‚àà S ‚Üí (s ‚ú¶ n) ‚àà S

_secures_ : (‚Ñï* ‚Üí ‚Ñï) ‚Üí (‚Ñï·¥∫ ‚Üí ‚Ñï) ‚Üí Set
S secures Y = ‚àÄ (s : ‚Ñï*) ‚Üí s ‚àà S ‚Üí ‚àÄ (Œ± : ‚Ñï·¥∫) ‚Üí s ‚àã Œ± ‚Üí Y (s ^) ‚â° Y Œ±

\end{code}

‚ñ† General bar recursion

\begin{code}

gBR : {A : Set}
    ‚Üí (‚Ñï* ‚Üí ‚Ñï)
    ‚Üí ((‚Ñï* ‚Üí A) ‚Üí (‚Ñï* ‚Üí (‚Ñï ‚Üí A) ‚Üí A) ‚Üí ‚Ñï* ‚Üí A)
    ‚Üí Set
gBR {A} S Œæ = ‚àÄ (G : ‚Ñï* ‚Üí A) (H : ‚Ñï* ‚Üí (‚Ñï ‚Üí A) ‚Üí A) (s : ‚Ñï*) ‚Üí
                  (s ‚àà S ‚Üí Œæ G H s ‚â° G s)
                √ó (s ‚àâ S ‚Üí Œæ G H s ‚â° H s (Œª n ‚Üí Œæ G H (s ‚ú¶ n)))

\end{code}

‚ñ† A nucleus for general bar recursion

\begin{code}

JŒπ : Ty
JŒπ = (Œπ·∂• ‚áæ Œπ) ‚ä† (Œπ* ‚áæ Œπ) ‚ä† ((Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)

private

 ‚ü®_,_,_‚ü© : {Œì : Cxt}
         ‚Üí T Œì (Œπ·∂• ‚áæ Œπ)
         ‚Üí T Œì (Œπ* ‚áæ Œπ)
         ‚Üí T Œì ((Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)
         ‚Üí T Œì JŒπ
 ‚ü® t‚ÇÄ , t‚ÇÅ , t‚ÇÇ ‚ü© = Pair ¬∑ t‚ÇÄ ¬∑ (Pair ¬∑ t‚ÇÅ ¬∑ t‚ÇÇ)

 V : {Œì : Cxt}
   ‚Üí T Œì JŒπ
   ‚Üí T Œì (Œπ·∂• ‚áæ Œπ)
 V w = Pr1 ¬∑ w

 ùëâ : ‚ü¶ JŒπ ‚üß ∏ ‚Üí ‚Ñï·¥∫ ‚Üí ‚Ñï
 ùëâ = pr‚ÇÅ

 S : {Œì : Cxt}
   ‚Üí T Œì JŒπ
   ‚Üí T Œì (Œπ* ‚áæ Œπ)
 S w = Pr1 ¬∑ (Pr2 ¬∑ w)

 ùëÜ : ‚ü¶ JŒπ ‚üß ∏ ‚Üí ‚Ñï* ‚Üí ‚Ñï
 ùëÜ = pr‚ÇÅ ‚àò pr‚ÇÇ

 B  : {Œì : Cxt}
   ‚Üí T Œì JŒπ
   ‚Üí T Œì ((Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)
 B w = Pr2 ¬∑ (Pr2 ¬∑ w)

 ùêµ : ‚ü¶ JŒπ ‚üß ∏ ‚Üí (‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí (‚Ñï* ‚Üí (‚Ñï ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏
 ùêµ = pr‚ÇÇ ‚àò pr‚ÇÇ

Œ∑ : {Œì : Cxt} ‚Üí T Œì (Œπ ‚áæ JŒπ)
Œ∑ = Lam ‚ü® Lam ŒΩ‚ÇÅ , Lam ùüè , Lam (Lam ŒΩ‚ÇÅ) ‚ü©
 -- Œª n . ‚ü® ŒªŒ±.n , Œªs.1 , ŒªGH.G ‚ü©

Œ∫ : {Œì : Cxt} ‚Üí T Œì ((Œπ ‚áæ JŒπ) ‚áæ JŒπ ‚áæ JŒπ)
Œ∫ = Lam (Lam ‚ü® Lam (V (ŒΩ‚ÇÇ ¬∑ (V ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ)) ¬∑ ŒΩ‚ÇÄ)
 -- Œª g  w . ‚ü® Œª Œ± . V (g    (V w    Œ±))    Œ±
             , Lam (Min ¬∑ (S ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ) ¬∑ (S (ŒΩ‚ÇÇ ¬∑ (V ŒΩ‚ÇÅ ¬∑ ^ ŒΩ‚ÇÄ ^)) ¬∑ ŒΩ‚ÇÄ))
 --          , Œª s . min  ( S w   s   ,  S ( g  (V  w     s^))      s)
             , Lam (Lam (B ŒΩ‚ÇÇ ¬∑ Lam (B (ŒΩ‚ÇÑ ¬∑ (V ŒΩ‚ÇÉ ¬∑ ^ ŒΩ‚ÇÄ ^)) ¬∑ ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ) ¬∑ ŒΩ‚ÇÄ)) ‚ü©)
 --          , Œª G   H . B w   (Œª s . B (g   (V  w     s^))    G    H   s)    H  ‚ü©

--
-- Instantiate the translation by importing the following module
-- with the nucleus (JŒπ, Œ∑, Œ∫)
--
open import GentzenTranslation JŒπ Œ∑ Œ∫ public

\end{code}

‚ñ† The generic element Œ©

\begin{code}

--
-- Helper function for constructing the constant bar-recursion functional Œ®
--
œÜ : {Œì : Cxt}
  ‚Üí T Œì (Œπ ‚áæ (Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)
œÜ = Rec ¬∑ Lam (Lam ŒΩ‚ÇÅ)
--  rec  (Œª G   H . G)
        ¬∑ Lam (Lam (Lam (Lam (Lam (ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ ¬∑ Lam (ŒΩ‚ÇÑ ¬∑ ŒΩ‚ÇÉ ¬∑ ŒΩ‚ÇÇ ¬∑ (ŒΩ‚ÇÅ ‚òÖ ŒΩ‚ÇÄ)))))))
--       (Œª n   z    G    H    s . H    s   (Œª x . z   G   H    (s ‚òÖ x)))
-- œÜ(0,G,H)   = G
-- œÜ(n+1,G,H) = Œªs.H(s,Œªx.œÜ(n,G,H,s‚ãÜx))

--
-- Bar-recursion functional for constant terminating functional ŒªŒ±.k
--
Œ® : {Œì : Cxt}
  ‚Üí T Œì (Œπ ‚áæ (Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)
Œ® = Lam (Lam (Lam (Lam (If ¬∑ (Lt ¬∑ ŒΩ‚ÇÉ ¬∑ Len ŒΩ‚ÇÄ)
                           ¬∑ (ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÄ)
                           ¬∑ (œÜ ¬∑ (Minus ¬∑ (Suc ¬∑ ŒΩ‚ÇÉ) ¬∑ Len ŒΩ‚ÇÄ) ¬∑ ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ)))))
-- Œ®(n,G,H,s) = G(s)              if |s|>n
-- Œ®(n,G,H,s) = œÜ(n+1-|s|,G,H,s)  otherwise

--
-- [1, Lemma 2.1] : Œ® k is a bar recursion functional for ŒªŒ±.k
--
Œ®-gBR : FunExt
      ‚Üí (k : ‚Ñï) ‚Üí gBR (Œª s ‚Üí lt k (len s)) (‚ü¶ Œ® ‚üß k)
-- i.e. for any G H s
--
--   k < |s|  ‚Üí  Œ® k G H s ‚â° G s
--   k ‚âÆ |s|  ‚Üí  Œ® k G H s ‚â° H s (Œª m ‚Üí Œ® k G H (s ‚ú¶ m)
--
-- The proof is given in the appendix.

Œë : {Œì : Cxt} ‚Üí T Œì (Œπ ‚áæ JŒπ)
Œë = Lam ‚ü® Lam (ŒΩ‚ÇÄ ¬∑ ŒΩ‚ÇÅ)
 -- Œªn. ‚ü® Œª Œ± . Œ± n
        , Lam (Lt ¬∑ ŒΩ‚ÇÅ ¬∑ Len ŒΩ‚ÇÄ)
 --     , Œª s . Lt   n    |s|
        , Œ® ¬∑ ŒΩ‚ÇÄ ‚ü©
 --     , Œ® n ‚ü©

--
-- the generic element
--
Œ© : {Œì : Cxt} ‚Üí T Œì (JŒπ ‚áæ JŒπ)
Œ© = Œ∫ ¬∑ Œë

\end{code}

‚ñ† A parametrized logical relation for general bar recursion

\begin{code}

--
-- Base case of the logical relation
--
RŒπ : ‚Ñï·¥∫ ‚Üí ‚ü¶ Œπ ‚üß ∏ ‚Üí ‚ü¶ JŒπ ‚üß ∏ ‚Üí Set
RŒπ Œ± n (Y , S , B) = n ‚â° Y Œ± √ó monotone S √ó S secures Y √ó gBR S B

--
-- Œ∑ preserves the logical relation
--
RŒ∑ : (Œ± : ‚Ñï·¥∫)
   ‚Üí {Œì : Cxt} (Œ≥ : ‚ü¶ Œì ‚üßÀ£) (n : ‚ü¶ Œπ ‚üß ∏) ‚Üí RŒπ Œ± n (‚ü¶ Œ∑ ‚üß·µê Œ≥ n)
RŒ∑ Œ± Œ≥ n = refl , (Œª _ _ z ‚Üí z) , (Œª _ _ _ _ ‚Üí refl) , (Œª _ _ _ ‚Üí (Œª _ ‚Üí refl) , Œª ())

--
-- Œ∫ preserves the logical relation
--
RŒ∫ : FunExt
   ‚Üí (Œ± : ‚Ñï·¥∫)
   ‚Üí {Œì : Cxt} (Œ≥ : ‚ü¶ Œì ‚üßÀ£) {f : ‚ü¶ Œπ ‚áæ Œπ ‚üß ∏} {g : ‚ü¶ Œπ ‚áæ JŒπ ‚üß ∏}
   ‚Üí (‚àÄ i ‚Üí RŒπ Œ± (f i) (g i))
   ‚Üí ‚àÄ {n w} ‚Üí RŒπ Œ± n w ‚Üí RŒπ Œ± (f n) (‚ü¶ Œ∫ ‚üß·µê Œ≥ g w)
--
-- The proof is given in the appendix.
--

--
-- Œ© preserves the logical relation
--
RŒ© : FunExt
   ‚Üí (Œ± : ‚Ñï·¥∫)
   ‚Üí ‚àÄ{n w} ‚Üí RŒπ Œ± n w ‚Üí RŒπ Œ± (Œ± n) (‚ü¶ Œ© ‚üß w)
RŒ© funExt Œ± {n} {w} = RŒ∫ funExt Œ± ‚ãÜ claim {n} {w}
 where
  mSŒë : (k : ‚Ñï) ‚Üí monotone (ùëÜ (‚ü¶ Œë ‚üß k))
  mSŒë k s m r = <‚ÜíLt k<|sm|
   where
   k<|s|  : k < len s
   k<|s|  = Lt‚Üí< r
   k<|sm| : k < len (s ‚ú¶ m)
   k<|sm| = ‚â§trans k<|s| (‚â§trans (‚â§suc' ‚â§refl) (‚â§refl' len‚ú¶-suc))
  SŒësVŒë : (k : ‚Ñï) ‚Üí ùëÜ (‚ü¶ Œë ‚üß k) secures ùëâ (‚ü¶ Œë ‚üß k)
  SŒësVŒë k s k<|s| Œ± sŒ± = sŒ± k (Lt‚Üí< k<|s|)
  claim : ‚àÄ i ‚Üí RŒπ Œ± (Œ± i) (‚ü¶ Œë ‚üß i)
  claim i = refl , mSŒë i , SŒësVŒë i , Œ®-gBR funExt i


\end{code}

‚ñ† Theorem 11. For any closed term Y : ‚Ñï·¥∫ ‚Üí ‚Ñï of T,

  1. S(Y·¥∂Œ©) is a monotone predicate securing Y, and

  2. B(Y·¥∂Œ©) is a functional of general bar recursion.

\begin{code}

Thm[gBR] : FunExt
         ‚Üí (Y : T Œµ (Œπ·∂• ‚áæ Œπ))
         ‚Üí   monotone (ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß)
           √ó ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß secures ‚ü¶ Y ‚üß
           √ó gBR (ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß) (ùêµ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß)
Thm[gBR] funExt Y = mS , SsY , gbr
 where
  --
  -- Extend RŒπ to R for all types of T
  --
  R : ‚Ñï·¥∫ ‚Üí {œÅ : Ty} ‚Üí ‚ü¶ œÅ ‚üß ∏ ‚Üí ‚ü¶ ‚ü® œÅ ‚ü©·¥∂ ‚üß ∏ ‚Üí Set
  R Œ± = LR._R_
   where
    import LogicalRelation JŒπ Œ∑ Œ∫ (RŒπ Œ±) (RŒ∑ Œ±) (RŒ∫ funExt Œ±) as LR
  --
  -- Use the fundamental theorem of logical relation
  --
  fact : ‚àÄ Œ± ‚Üí RŒπ Œ± (‚ü¶ Y ‚üß Œ±) ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß
  fact Œ± = LR.FTLR Y ‚ãÜ (RŒ© funExt Œ±)
   where
    import LogicalRelation JŒπ Œ∑ Œ∫ (RŒπ Œ±) (RŒ∑ Œ±) (RŒ∫ funExt Œ±) as LR
  mS : monotone (ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß)
  mS = pr‚ÇÅ (pr‚ÇÇ (fact 0 ∑))
  SsY : ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß secures ‚ü¶ Y ‚üß
  SsY s sS Œ± sŒ± = begin
     ‚ü¶ Y ‚üß (s ^)
    ‚â°‚ü® pr‚ÇÅ (fact (s ^)) ‚ü©
     ùëâ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß (s ^)
    ‚â°‚ü® pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ (fact 0 ∑))) s sS Œ± sŒ± ‚ü©
     ùëâ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß Œ±
    ‚â°‚ü® sym (pr‚ÇÅ (fact Œ±)) ‚ü©
     ‚ü¶ Y ‚üß Œ±
    ‚àé
  gbr : gBR (ùëÜ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß) (ùêµ ‚ü¶ Y ·¥∂ ¬∑ Œ© ‚üß)
  gbr = pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ (fact 0 ∑)))

--
-- Functional of general bar recursion
--
GBF : T Œµ (Œπ·∂• ‚áæ Œπ)
    ‚Üí (‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí (‚Ñï* ‚Üí (‚Ñï ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏
GBF t = ‚ü¶ B (t ·¥∂ ¬∑ Œ©) ‚üß


\end{code}

‚ñ† Spector's Bar-recursion functionals

\begin{code}

private
 --
 -- Step functionals fro general bar recursion
 --
 H : {Œì : Cxt}
   ‚Üí T Œì ((Œπ·∂• ‚áæ Œπ)           -- termination functional
        ‚áæ (Œπ* ‚áæ œÉ)           -- base functional for Spector's bar recursion
        ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) -- step functional for Spector's bar recursion
        ‚áæ Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ)  -- step functional for general bar recursion
 H = Lam (Lam (Lam (Lam (Lam (If ¬∑ (Minus ¬∑ Len ŒΩ‚ÇÅ ¬∑ (ŒΩ‚ÇÑ ¬∑ ^ ŒΩ‚ÇÅ ^))
                                 ¬∑ (ŒΩ‚ÇÉ ¬∑ ŒΩ‚ÇÅ)
                                 ¬∑ (ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ))))))

 --
 -- Converting general-bar-recursion functional to Spector's one
 --
 Œ¶ : {Œì : Cxt}
   ‚Üí T Œì ((Œπ·∂• ‚áæ Œπ)
        ‚áæ ((Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)  -- general bar recursion
        ‚áæ ((Œπ* ‚áæ œÉ) ‚áæ (Œπ* ‚áæ (Œπ ‚áæ œÉ) ‚áæ œÉ) ‚áæ Œπ* ‚áæ œÉ)) -- Spector's bar recursion
 Œ¶ = Lam (Lam (Lam (Lam (ŒΩ‚ÇÇ ¬∑ Lam (Œ® ¬∑ (ŒΩ‚ÇÑ ¬∑ ^ ŒΩ‚ÇÄ ^) ¬∑ ŒΩ‚ÇÇ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ) ¬∑ (H ¬∑ ŒΩ‚ÇÉ ¬∑ ŒΩ‚ÇÅ ¬∑ ŒΩ‚ÇÄ)))))

--
-- Functional of Spector's bar recursion
--
SBF : T Œµ (Œπ·∂• ‚áæ Œπ)
    ‚Üí (‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí (‚Ñï* ‚Üí (‚Ñï ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚ü¶ œÉ ‚üß ∏) ‚Üí ‚Ñï* ‚Üí ‚ü¶ œÉ ‚üß ∏
SBF t = ‚ü¶ Œ¶ ¬∑ t ¬∑ B (t ·¥∂ ¬∑ Œ©) ‚üß


\end{code}

‚ñ† Appendix : Proofs of
             1. Œ®-gBR : Œ® k is a bar recursion functional for ŒªŒ±.k
             2. RŒ∫ : Œ∫ preserves the logical relation

\begin{code}

--
-- [1, Lemma 2.1] : Œ® k is a bar recursion functional for ŒªŒ±.k
--
-- Œ®-gBR : FunExt
--       ‚Üí (k : ‚Ñï) ‚Üí gBR (Œª s ‚Üí lt k (len s)) (‚ü¶ Œ® ‚üß k)
--
-- i.e. for any G H s
--
--   k < |s|  ‚Üí  Œ® k G H s ‚â° G s
--   k ‚âÆ |s|  ‚Üí  Œ® k G H s ‚â° H s (Œª m ‚Üí Œ® k G H (s ‚ú¶ m)
--
Œ®-gBR funExt k G H s = base , step
 where
  base : ¬¨ (lt k (len s) ‚â° 0)
       ‚Üí ‚ü¶ Œ® ‚üß k G H s ‚â° G s
  base = If-spec‚ÇÅ
  step : lt k (len s) ‚â° 0
       ‚Üí ‚ü¶ Œ® ‚üß k G H s ‚â° H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m))
  step k‚âÆ|s| = case claim‚ÇÄ claim‚ÇÅ (‚â§-cases (Lt‚Üí‚â§ k‚âÆ|s|))
   where
    E4 : ‚ü¶ Œ® ‚üß k G H s ‚â° ‚ü¶ œÜ ‚üß (suc k - len s) G H s
    E4 = If-spec‚ÇÄ k‚âÆ|s|
    claim‚ÇÄ : len s ‚â° k
           ‚Üí ‚ü¶ Œ® ‚üß k G H s ‚â° H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m))
    claim‚ÇÄ |s|‚â°n = begin
      ‚ü¶ Œ® ‚üß k G H s ‚â°‚ü® E4 ‚ü©  ‚ü¶ œÜ ‚üß (suc k - len s) G H s
                    ‚â°‚ü® ‚Ä† ‚ü©   ‚ü¶ œÜ ‚üß 1 G H s
                    ‚â°‚ü® E4' ‚ü© H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m)) ‚àé
     where
      ‚Ä† : ‚ü¶ œÜ ‚üß (suc k - len s) G H s ‚â° ‚ü¶ œÜ ‚üß 1 G H s
      ‚Ä† = ap (Œª x ‚Üí ‚ü¶ œÜ ‚üß x G H s)
             (trans (ap (suc k -_) |s|‚â°n) (Lm[n+1-n‚â°1] k))
      k+1‚â°|sm| : {m : ‚Ñï} ‚Üí suc k ‚â° len (s ‚ú¶ m)
      k+1‚â°|sm| = trans (sym (ap suc |s|‚â°n)) len‚ú¶-suc
      k<|sm| : {m : ‚Ñï} ‚Üí ¬¨ (lt k (len (s ‚ú¶ m)) ‚â° 0)
      k<|sm| {m} = <‚ÜíLt (‚â§refl' k+1‚â°|sm|)
      fact : (m : ‚Ñï) ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m) ‚â° G (s ‚ú¶ m)
      fact _ = If-spec‚ÇÅ k<|sm|
      E4' : H s (Œª m ‚Üí G (s ‚ú¶ m)) ‚â° H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m))
      E4' = ap (H s) (sym (funExt fact))
    claim‚ÇÅ : len s < k
           ‚Üí ‚ü¶ Œ® ‚üß k G H s ‚â° H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m))
    claim‚ÇÅ |s|<k = begin
      ‚ü¶ Œ® ‚üß k G H s ‚â°‚ü® E4 ‚ü©  ‚ü¶ œÜ ‚üß (suc k - len s) G H s
                    ‚â°‚ü® E3 ‚ü©  H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (k+1-|s|-1) G H (s ‚ú¶ m))
                    ‚â°‚ü® ‚ñ° ‚ü©   H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (suc k - len (s ‚ú¶ m)) G H (s ‚ú¶ m))
                    ‚â°‚ü® E4' ‚ü© H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m)) ‚àé
     where
      |s|<k+1 : len s < suc k
      |s|<k+1 = ‚â§suc' |s|<k
      k+1-|s|-1 : ‚Ñï
      k+1-|s|-1 = pr‚ÇÅ (Lm[n<m‚Üík+1=m-n] |s|<k+1)
      k+1-|s|-1-spec : suc k+1-|s|-1 ‚â° suc k - len s
      k+1-|s|-1-spec = pr‚ÇÇ (Lm[n<m‚Üík+1=m-n] |s|<k+1)
      E3 : ‚ü¶ œÜ ‚üß (suc k - len s) G H s ‚â° H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (k+1-|s|-1) G H (s ‚ú¶ m))
      E3 = ap (Œª x ‚Üí ‚ü¶ œÜ ‚üß x G H s) (sym k+1-|s|-1-spec)
      ex : (m : ‚Ñï)
         ‚Üí ‚ü¶ œÜ ‚üß (k+1-|s|-1) G H (s ‚ú¶ m) ‚â° ‚ü¶ œÜ ‚üß (suc k - len (s ‚ú¶ m)) G H (s ‚ú¶ m)
      ex m = ap (Œª x ‚Üí ‚ü¶ œÜ ‚üß x G H (s ‚ú¶ m))
                (trans (Lm[k+1=n+1-m‚Üík=n-m] k k+1-|s|-1-spec)
                       (ap (suc k -_) (len‚ú¶-suc {s})))
      ‚ñ° :  H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (k+1-|s|-1) G H (s ‚ú¶ m))
         ‚â° H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (suc k - len (s ‚ú¶ m)) G H (s ‚ú¶ m))
      ‚ñ° = ap (H s) (funExt ex)
      n‚âÆ|sm| : {m : ‚Ñï} ‚Üí lt k (len (s ‚ú¶ m)) ‚â° 0
      n‚âÆ|sm| = transport (Œª x ‚Üí lt k x ‚â° 0) len‚ú¶-suc (‚â§‚ÜíLt |s|<k)
      ex' : (m : ‚Ñï)
          ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m) ‚â° ‚ü¶ œÜ ‚üß (suc k - len (s ‚ú¶ m)) G H (s ‚ú¶ m)
      ex' m = If-spec‚ÇÄ n‚âÆ|sm|
      E4' :  H s (Œª m ‚Üí ‚ü¶ œÜ ‚üß (suc k - len (s ‚ú¶ m)) G H (s ‚ú¶ m))
           ‚â° H s (Œª m ‚Üí ‚ü¶ Œ® ‚üß k G H (s ‚ú¶ m))
      E4' = sym (ap (H s) (funExt ex'))


--
-- Œ∫ preserves the logical relation
--
-- RŒ∫ : (Œ± : ‚Ñï·¥∫)
--    ‚Üí {Œì : Cxt} (Œ≥ : ‚ü¶ Œì ‚üßÀ£) {f : ‚ü¶ Œπ ‚áæ Œπ ‚üß ∏} {g : ‚ü¶ Œπ ‚áæ JŒπ ‚üß ∏}
--    ‚Üí (‚àÄ i ‚Üí RŒπ Œ± (f i) (g i))
--    ‚Üí ‚àÄ {n w} ‚Üí RŒπ Œ± n w ‚Üí RŒπ Œ± (f n) (‚ü¶ Œ∫ ‚üß·µê Œ≥ g w)
RŒ∫ funExt Œ± Œ≥ {f} {g} Œ∂ {n} {Y , S , B} (n‚â°YŒ± , mS , SsY , gbr) = e , mSŒ∫ , SŒ∫sVŒ∫ , gbrŒ∫
 where
  e‚ÇÄ : f n ‚â° pr‚ÇÅ (g n) Œ±
  e‚ÇÄ = pr‚ÇÅ (Œ∂ n)
  e‚ÇÅ : pr‚ÇÅ (g n) Œ± ‚â° pr‚ÇÅ (g (Y Œ±)) Œ±
  e‚ÇÅ = ap (Œª x ‚Üí pr‚ÇÅ (g x) Œ±) n‚â°YŒ±
  e : f n ‚â° pr‚ÇÅ (g (Y Œ±)) Œ±
  e = trans e‚ÇÄ e‚ÇÅ
  mSŒ∫ : monotone (ùëÜ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)))
  mSŒ∫ s n sSŒ∫ = Min-nonzero' _ _ snS snSg
   where
    sS : s ‚àà S
    sS = pr‚ÇÅ (Min-nonzero _ _ sSŒ∫)
    snS : (s ‚ú¶ n) ‚àà S
    snS = mS s n sS
    Ys‚â°Ysn : Y (s ^) ‚â° Y ((s ‚ú¶ n) ^)
    Ys‚â°Ysn = SsY s sS ((s ‚ú¶ n) ^) (s‚àãsn^ s)
    sSg : s ‚àà ùëÜ (g (Y (s ^)))
    sSg = pr‚ÇÇ (Min-nonzero (S s) _ sSŒ∫)
    snSgs : (s ‚ú¶ n) ‚àà ùëÜ (g (Y (s ^)))
    snSgs = pr‚ÇÅ (pr‚ÇÇ (Œ∂ (Y (s ^)))) s n sSg
    snSg : (s ‚ú¶ n) ‚àà ùëÜ (g (Y ((s ‚ú¶ n) ^)))
    snSg = transport (Œª x ‚Üí (s ‚ú¶ n) ‚àà ùëÜ (g x)) Ys‚â°Ysn snSgs
  SŒ∫sVŒ∫ : (ùëÜ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B))) secures (ùëâ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)))
  SŒ∫sVŒ∫ s sSŒ∫ Œ± sŒ± = begin
     ùëâ (g (Y (s ^))) (s ^)
    ‚â°‚ü® ap (Œª x ‚Üí ùëâ (g x) (s ^)) Ys‚â°YŒ± ‚ü©
     ùëâ (g (Y Œ±)) (s ^)
    ‚â°‚ü® pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ (Œ∂ (Y Œ±)))) s sSgŒ± Œ± sŒ± ‚ü©
     ùëâ (g (Y Œ±)) Œ±
    ‚àé
   where
    sS : s ‚àà S
    sS = pr‚ÇÅ (Min-nonzero _ _ sSŒ∫)
    Ys‚â°YŒ± : Y (s ^) ‚â° Y Œ±
    Ys‚â°YŒ± = SsY s sS Œ± sŒ±
    sSg : s ‚àà ùëÜ (g (Y (s ^)))
    sSg = pr‚ÇÇ (Min-nonzero (S s) _ sSŒ∫)
    sSgŒ± : s ‚àà ùëÜ (g (Y Œ±))
    sSgŒ± = transport (Œª x ‚Üí s ‚àà ùëÜ (g x)) Ys‚â°YŒ± sSg
  gbrŒ∫ : gBR (ùëÜ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B))) (ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)))
  gbrŒ∫ G H s = base , step
   where
    base : s ‚àà ùëÜ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B))
         ‚Üí ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H s ‚â° G s
    base sSŒ∫ = begin
       B (Œª s' ‚Üí ùêµ (g (Y (s' ^))) G H s') H s
      ‚â°‚ü® pr‚ÇÅ (gbr _ H s) sS ‚ü©
       ùêµ (g (Y (s ^))) G H s
      ‚â°‚ü® pr‚ÇÅ (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ (Œ∂ (Y (s ^))))) G H s) sSg ‚ü©
       G s
      ‚àé
     where
      sS : s ‚àà S
      sS = pr‚ÇÅ (Min-nonzero _ _ sSŒ∫)
      sSg : s ‚àà ùëÜ (g (Y (s ^)))
      sSg = pr‚ÇÇ (Min-nonzero (S s) _ sSŒ∫)
    step : s ‚àâ ùëÜ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B))
         ‚Üí  ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H s
          ‚â° H s (Œª m ‚Üí ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H (s ‚ú¶ m))
    step ¬¨sSŒ∫ = case claim‚ÇÄ claim‚ÇÅ (‚àà-dec S)
     where
      claim‚ÇÄ : s ‚àà S
             ‚Üí  ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H s
              ‚â° H s (Œª m ‚Üí ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H (s ‚ú¶ m))
      claim‚ÇÄ sS = begin
         B (Œª s' ‚Üí ùêµ (g (Y (s' ^))) G H s') H s
        ‚â°‚ü® pr‚ÇÅ (gbr _ H s) sS ‚ü©
         ùêµ (g (Y (s ^))) G H s
        ‚â°‚ü® pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ (pr‚ÇÇ (Œ∂ (Y (s ^))))) G H s) ¬¨sSg ‚ü©
         H s (Œª m ‚Üí ùêµ (g (Y (s ^))) G H (s ‚ú¶ m))
        ‚â°‚ü® ap (H s) (funExt ex) ‚ü©
         H s (Œª m ‚Üí ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H (s ‚ú¶ m))
        ‚àé
       where
        ¬¨sSg : s ‚àâ ùëÜ (g (Y (s ^)))
        ¬¨sSg = Min-zero-cases _ _ ¬¨sSŒ∫ sS
        Ys‚â°Ysm : {m : ‚Ñï} ‚Üí Y (s ^) ‚â° Y ((s ‚ú¶ m) ^)
        Ys‚â°Ysm {m} = SsY s sS ((s ‚ú¶ m) ^) (s‚àãsn^ s)
        ex : (m : ‚Ñï)
           ‚Üí  ùêµ (g (Y (s ^))) G H (s ‚ú¶ m) -- ‚â° ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H (s ‚ú¶ m)
            ‚â° B (Œª s' ‚Üí ùêµ (g (Y (s' ^))) G H s') H (s ‚ú¶ m)
        ex m = begin
          ùêµ (g (Y (s ^))) G H (s ‚ú¶ m)
         ‚â°‚ü® ap (Œª x ‚Üí ùêµ (g x) G H (s ‚ú¶ m)) Ys‚â°Ysm ‚ü©
          ùêµ (g (Y ((s ‚ú¶ m) ^))) G H (s ‚ú¶ m)
         ‚â°‚ü® sym (pr‚ÇÅ (gbr _ H (s ‚ú¶ m)) (mS s m sS)) ‚ü©
          B (Œª s' ‚Üí ùêµ (g (Y (s' ^))) G H s') H (s ‚ú¶ m)
         ‚àé
      claim‚ÇÅ : s ‚àâ S
             ‚Üí  ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H s
              ‚â° H s (Œª m ‚Üí ùêµ (‚ü¶ Œ∫ ‚üß·µê Œ≥ g (Y , S , B)) G H (s ‚ú¶ m))
      claim‚ÇÅ = pr‚ÇÇ (gbr _ H s)

\end{code}
